service: tileserverless

frameworkVersion: ">=1.75.1 <2.0.0"

plugins:
  - serverless-content-encoding

package:
  exclude:
    - .git/**
    - src/**
    - docs/**
    - .*
    - tsconfig.*
    - package-lock.json
    - yarn.lock
    - README.md
    - serverless-*.yml

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 128
  region: us-east-1
  apiGateway:
    binaryMediaTypes:
      - "application/x-protobuf"
      - "application/vnd.mapbox-vector-tile"

  stage: dev
  vpc:
    securityGroupIds:
      - ${self:custom.sgId}
    subnetIds:
      - ${self:custom.subnetId}
  environment:
    MOUNT_PATH: ${self:custom.mountPath}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - "elasticfilesystem:ClientMount"
        - "elasticfilesystem:ClientWrite"
      Resource:
        - Fn::Join:
            - ":"
            - - arn:aws:elasticfilesystem
              - ${self:provider.region}
              - Ref: "AWS::AccountId"
              - access-point/${self:custom.accessPointId}

custom:
  sgId: sg-022276ed626586a61
  # sgId: ${cf:tileserverless-network-${opt:stage, self:provider.stage}.LambdaSecurityGroupId}
  subnetId: subnet-9487bf9b
  # subnetId: ${cf:tileserverless-network-${opt:stage, self:provider.stage}.SubnetId}
  fsId: fs-6f0c08ec
  # fsId: ${cf:tileserverless-storage-${opt:stage, self:provider.stage}.FileSystemId}
  accessPointId: fsap-02adce03df935f140
  #accessPointId: ${cf:tileserverless-storage-${opt:stage, self:provider.stage}.FileSystemAccessPointId}
  mountPath: /mnt/efs
  contentEncoding:
    minimumCompressionSize: 0

resources:
  extensions:
    TileLambdaFunction:
      Properties:
        FileSystemConfigs:
          - Arn:
              Fn::Join:
                - ":"
                - - arn:aws:elasticfilesystem
                  - ${self:provider.region}
                  - Ref: "AWS::AccountId"
                  - access-point/${self:custom.accessPointId}
            LocalMountPath: ${self:custom.mountPath}

functions:
  tile:
    handler: dist/tile.handler
    events:
      - http:
          path: tiles/{proxy+}
          method: get
          integration: lambda
          response:
            contentHandling: CONVERT_TO_BINARY
            headers:
              "Content-Type": "'application/vnd.mapbox-vector-tile'"
              "Access-Control-Allow-Origin": "'*'"
            statusCodes:
              200:
                pattern: ".*"
              204:
                pattern: '.*"statusCode":204,.*'
                template: |
                  #set ($obj = $util.parseJson($input.path('$.errorMessage')))
                  { "message" : "$obj.body.message" }
